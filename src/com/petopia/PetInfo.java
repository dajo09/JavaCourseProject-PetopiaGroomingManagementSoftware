
package com.petopia;

import com.petopia.api.PetQuery;
import com.petopiables.Functions;
import com.petopiables.PetopiaHeader;
import java.util.Scanner;

public class PetInfo extends PetopiaHeader{
    Scanner sc = new Scanner(System.in);
    ManageServices manageServices = new ManageServices();
    Functions fx = new Functions();
   
    public void petInfo(){
        //instantiations
        PetQuery petQuery = new PetQuery();
       
        petopiaHeader();
        
        System.out.format("|            PET INFORMATION            |%n");
        System.out.format("+---------------------------------------+%n");
        System.out.format("|                                       |%n");
        System.out.format("|                                       |%n");
        System.out.format("|       (\u001B[36m1\u001B[0m) NEW PET REGISTRATION        |%n");       
        System.out.format("|       (\u001B[36m2\u001B[0m) SHOW ALL PET                |%n");
        System.out.format("|       (\u001B[36m3\u001B[0m) REMOVE A PET                |%n");
        System.out.format("|       (\u001B[36m4\u001B[0m) RETREIVE A PET              |%n");  
        System.out.format("|       (\u001B[36m5\u001B[0m) SEARCH PET                  |%n");    
        System.out.format("|       (\u001B[36m6\u001B[0m) EDIT PET INFO               |%n");
        System.out.format("|       (\u001B[36m7\u001B[0m) CANCEL/RETURN               |%n");
        padThreeBars();
        System.out.format("+---------------------------------------+%n");
        
     try {
        System.out.print("Enter a service: ");
        int choice = sc.nextInt();
        sc.nextLine();

        switch (choice) {
        case 1:
            // INSERT INTO PET VALUES....
            // PETID WILL BE AUTOGENERATED
           
            System.out.print("PET NAME: ");
            String petName = sc.nextLine();
            
            petQuery.displayPetType();
            
            int type = 0;
            boolean validInput = false;
            do {
                try {
                    System.out.print("CHOOSE A PET ID TYPE: ");  
                    type = Integer.parseInt(sc.nextLine());
                    validInput = true;
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a valid number for the pet type.");
                    // Handle the error or exit gracefully               
                 }
            } while (!validInput);
            

            System.out.print("AGE: ");
            int age = sc.nextInt();
            sc.nextLine();
            
            System.out.print("BREED: ");
            String breed = sc.nextLine();
                        
            //display the owner name for reference
            petQuery.displayOwnerName();
            
            //System.out.print("CHOOSE THE ID OF OWNER: ");
            int custId = 0;
            boolean validCustomerInputId = false;
            
            do {
                System.out.print("Choose the customer's ID : ");
                try {
                    custId = Integer.parseInt(sc.nextLine());
                    validCustomerInputId = true;
                    
               
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a valid number for the customer ID.");
             
                }
            } while (!validCustomerInputId);
          
            int archived = 0;
            System.out.println("");
            
            // ENTER ALL FIELDS IN THE DATABASE
            petQuery.addNewPet(petName, type, age, breed, custId, archived);
            this.petInfo();
            break;
        
        case 2:
            
            petQuery.displaytAllPets();
            fx.xToCancel(this::petInfo);// daff: changed code to this
            break;
        
        case 3:
            
            //display all the pets inner join to table type and customer where archived = 0
            petQuery.displaytAllPets();
           
            System.out.print("Type id of pet to archive: ");
            
            int petId = sc.nextInt();
            sc.nextLine();
            
            petQuery.archivedPet(petId);
            this.petInfo();          
            break;
                   
            //RETREIVE PETS FROM ARCHIVE
        case 4:
            //display all the pets archived = 1
            petQuery.displayDeletedPets();
            System.out.print("Enter pet id you want to retrieve from archived");
            int id = sc.nextInt();
            sc.nextLine();
            
            System.out.println();
           
            petQuery.retrivePet(id);            
            //redirect user to CRUD menu
            this.petInfo();
            break;
            
        case 5: //search by name or id
            
            //display all pets where archived = 0;
            petQuery.displaytAllPets();
            
            int petById = 0;
            String petByName = "";
            boolean validOption = false;
            boolean petExists = false;
                do {
                    System.out.print("Enter '1' to search by pet ID or '2' to search by pet name: ");
                    int searchOption = sc.nextInt();

                    if (searchOption == 1) {
                        System.out.print("Enter the pet ID: ");
                        petById = sc.nextInt();
                        //checks  if the pet with an ID the user put is exist in our database  
                        petExists = petQuery.petExist(petById, petByName);
                          
                        if (!petExists) {
                            System.out.println("Pet not found. Please enter a valid pet ID");
                         }  
                        validOption = true;
                    } else if (searchOption == 2) {
                        System.out.print("Enter the pet name: ");
                        sc.nextLine();
                        petByName = sc.nextLine();
                        //checks  if the pet with a name the user put is exist in our database  
                        petExists = petQuery.petExist(petById, petByName);
                        if (!petExists) {
                           System.out.println("Pet name not found.");
                        }  
                        validOption = true;
                    } else {
                        System.out.println("Invalid search option!");
                    }
      
                // loop Enter '1' to search by pet ID or '2' to search by pet name: 1
                // till  the user put a valid option or the pet ID or pet name doesn't exist in our  db
                } while (!validOption || !petExists); 
                
                System.out.println();
                if (petExists) {
                       petQuery.searchPetByIdOrByName(petById, petByName);
                } else {
                       System.out.println("Pet not found.");
                       
                }
   
            //redirect user to CRUD menud
            this.petInfo();
            break;
       
        case 6: // Edit a pet info
               
            //display all the pets inner join to table type and customer where archived = 0
            petQuery.displaytAllPets();
            System.out.print("Enter the ID of pet you want to change: ");
            int petIdToSelect = sc.nextInt();
            sc.nextLine();

            //show the pet info that are being selected
            petQuery.selectPetFields(petIdToSelect); 
                           
            System.out.print("Enter the field you want to change: ");
            String fieldName = sc.nextLine();

            System.out.print("Enter its new value: ");
            String newValue = sc.nextLine();

            // Determine the data type of the new value
            Object newData;
            try {
                newData = Integer.parseInt(newValue); // Try parsing as an integer
            } catch (NumberFormatException e) {
                newData = newValue; // else  string
            }

            petQuery.updatePet(fieldName, newData, petIdToSelect);
              
            this.petInfo();
            break;
              
        default:
            System.out.println("Invalid Input! Enter choice enclosed in ().");
            manageServices.manageServices();
        }
       
        } catch (Exception e) {
            System.out.println(e);
           
     } //end of try catch

   }     
}
